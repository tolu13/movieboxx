// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id    String @id @default(uuid())
  email String @unique

  password String
  name     String

  bookings  Booking[]
  createdAt DateTime  @default(now())
}

model Movie {
  id          String     @id @default(uuid())
  title       String
  description String
  posterUrl   String?
  duration    Int // in minutes
  genre       String
  rating      Float?
  showtimes   Showtime[]
  createdAt   DateTime   @default(now())
}

model Theater {
  id        String     @id @default(uuid())
  name      String
  location  String
  seats     Seat[]
  showtimes Showtime[]
}

model Showtime {
  id        String    @id @default(uuid())
  time      DateTime
  movieId   String
  theaterId String
  bookings  Booking[]

  movie   Movie   @relation(fields: [movieId], references: [id])
  theater Theater @relation(fields: [theaterId], references: [id])
}

model Seat {
  id        String    @id @default(uuid())
  number    String // e.g., "A5"
  theaterId String
  bookings  Booking[]

  theater Theater @relation(fields: [theaterId], references: [id])
}

model Booking {
  id         String   @id @default(uuid())
  userId     String
  showtimeId String
  seatId     String
  createdAt  DateTime @default(now())

  user     User     @relation(fields: [userId], references: [id])
  showtime Showtime @relation(fields: [showtimeId], references: [id])
  seat     Seat     @relation(fields: [seatId], references: [id])
}
